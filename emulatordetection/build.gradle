plugins {
    id 'com.android.library'
}

ext {
    PUBLISH_GROUP_ID = 'com.reveny.emulatordetection.plugin'
    PUBLISH_ARTIFACT_ID = 'emulator-detection-plugin'
    PUBLISH_VERSION = '1.5.0'
}

android {
    namespace 'com.reveny.emulatordetection.plugin'
    compileSdk rootProject.ext.androidCompileSdkVersion

    defaultConfig {
        minSdk rootProject.ext.androidMinSdkVersion

        versionCode rootProject.ext.verCode
        versionName rootProject.ext.verName
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        libraryVariants.configureEach { variant ->
            def variantName = variant.name.capitalize()
            def copyTaskName = "copy${variantName}Artifacts"
            def assembleTaskName = "assemble${variantName}"

            tasks.register(copyTaskName, Copy) {
                dependsOn tasks.named(assembleTaskName)
                group = "build"
                variant.outputs.each { output ->
                    def newOutputName = output.outputFile.name.replace(".aar", "-" + android.defaultConfig.versionName + ".aar")
                    from(output.outputFile.parent) {
                        include output.outputFile.name
                        rename(output.outputFile.name, newOutputName)
                    }
                }
                into(layout.buildDirectory.dir("../../release"))
            }

            tasks.named(assembleTaskName).configure {
                finalizedBy(tasks.named(copyTaskName))
            }
        }
    }

    buildTypes {
        debug {
            ndk {
                debugSymbolLevel 'FULL'
            }
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_OPTIM=debug"
                    arguments "NDK_DEBUG=1"
                }
            }
        }
        release {
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_OPTIM=release"
                    arguments "NDK_DEBUG=0"
                }
            }

            minifyEnabled false
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Build/Android.mk"
        }
    }
    ndkVersion = rootProject.ext.androidCompileNdkVersion
}
